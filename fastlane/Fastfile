$:.unshift File.dirname("../.." + __FILE__)

# require '../Various/version.rb'

import './Lyon/Fastfile'
import './Bruxelles/Fastfile'
import './CrÃ©teil/Fastfile'
import './Dublin/Fastfile'
import './Luxembourg/Fastfile'
import './Marseille/Fastfile'
import './Mulhouse/Fastfile'
import './Nantes/Fastfile'
import './Paris/Fastfile'
import './Toulouse/Fastfile'

default_platform :ios

def submitForReviewDeliverBlock

    currentBuildVersion = get_version_number
    
    currentBuildNumber = get_build_number

deliver(automatic_release: true,
        skip_screenshots: true,
        skip_metadata: true,
        submit_for_review: true,
        skip_binary_upload: true,
        app_version: currentBuildVersion,
        build_number: currentBuildNumber
    )

end

platform :ios do

update_fastlane

before_all do
#   increment_build_number
  # cocoapods
end

lane :testLyon do

cp_appstore(only_lyon: true)

end

lane :cp_appstore do |actualOptions|

    clean_build_artifacts

    is_only_lyon = actualOptions[:only_lyon]
    
    if is_only_lyon == nil	
        is_only_lyon = false
    end

    # verify_xcode

    if (is_only_lyon == false)
        ensure_git_branch
    end

    ensure_git_status_clean

    currentBuildVersion = get_version_number

    Helper.log.info "Current build version: #{currentBuildVersion}"

    change_build_version = prompt(text: "Change build version?", boolean: true)


    if (change_build_version == true)

      buildVersion = prompt(text: "Build Version: ")

      increment_version_number(version_number: buildVersion)

    end

    
    currentBuildVersion = get_version_number
# 
# 	updateBuildVersion(buildVersion)
# 
# 	bumpBuildNumber

    increment_build_number
    
    currentBuildNumber = get_build_number

    options = {
        :automatic_release => true,
        :skip_screenshots => true
    }
    
    
    
    ENV['CP_CURRENT_VERSION'] = currentBuildVersion
    
    ENV['CP_CURRENT_BUILD'] = currentBuildNumber

    if (is_only_lyon == true)
    
        options[:is_only_lyon] = true
    
    end

	ENV["DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS"] = "-t DAV"

    lyon_appstore(options)

    if (is_only_lyon == false)
        bruxelles_appstore(options)

        creteil_appstore(options)

        dublin_appstore(options)

        luxembourg_appstore(options)

        marseille_appstore(options)

        mulhouse_appstore(options)

        nantes_appstore(options)

        paris_appstore(options)

        toulouse_appstore(options)
        
        clean_build_artifacts
    
        git_add(path: ".")

        git_commit(path: ".",
                message: "Version Bump #{currentBuildVersion} (#{currentBuildNumber})")

        add_git_tag(prefix: 'v', build_number: currentBuildNumber)

        push_to_git_remote
    
    end

end

lane :submitForReview do

    lyon_copyDeliverfile

    submitForReviewDeliverBlock

    lyon_deleteDeliverfile

//

    bruxelles_copyDeliverfile

    submitForReviewDeliverBlock

    bruxelles_deleteDeliverfile

//

    creteil_copyDeliverfile

    submitForReviewDeliverBlock

    creteil_deleteDeliverfile

//

    dublin_copyDeliverfile

    submitForReviewDeliverBlock

    dublin_deleteDeliverfile

//

    luxembourg_copyDeliverfile

    submitForReviewDeliverBlock

    luxembourg_deleteDeliverfile

//

    marseille_copyDeliverfile

    submitForReviewDeliverBlock

    marseille_deleteDeliverfile

//

    mulhouse_copyDeliverfile

    submitForReviewDeliverBlock

    mulhouse_deleteDeliverfile

//

    nantes_copyDeliverfile

    submitForReviewDeliverBlock

    nantes_deleteDeliverfile

//

    paris_copyDeliverfile

    submitForReviewDeliverBlock

    paris_deleteDeliverfile

//

    toulouse_copyDeliverfile

    submitForReviewDeliverBlock

    toulouse_deleteDeliverfile

//

end

lane :uploadSymbolsToFabric do

clean_build_artifacts

currentBuildNumber = get_build_number

ENV['DOWNLOAD_DSYMS_BUILD_NUMBER'] = "#{currentBuildNumber}"

lyon_uploadSymbolsToFabric

bruxelles_uploadSymbolsToFabric

creteil_uploadSymbolsToFabric

dublin_uploadSymbolsToFabric

luxembourg_uploadSymbolsToFabric

marseille_uploadSymbolsToFabric

mulhouse_uploadSymbolsToFabric

nantes_uploadSymbolsToFabric

paris_uploadSymbolsToFabric

toulouse_uploadSymbolsToFabric

upload_symbols_to_crashlytics

clean_build_artifacts

end

after_all do |lane|

    notificationText = "Finished #{lane}"
    
    notificationUsername = ENV['CP_NOTIFICATION_USERNAME']
    
    notificationPassword = ENV['CP_NOTIFICATION_PASSWORD']
    
    raise "no username or password" if (notificationUsername.nil? || notificationUsername.empty? || notificationPassword.nil? || notificationPassword.empty?)
    
    encodedNotificationText = URI::encode(notificationText)
    
    notificationURL = "https://smsapi.free-mobile.fr/sendmsg?user=#{notificationUsername}&pass=#{notificationPassword}&msg=#{encodedNotificationText}"

    sh "curl -X 'GET' '#{notificationURL}'"

    puts notificationText
end

error do |lane, exception|
      notificationText = "#{lane} had an error: #{exception}"
    
    notificationUsername = ENV['CP_NOTIFICATION_USERNAME']
    
    notificationPassword = ENV['CP_NOTIFICATION_PASSWORD']
    
    raise "no username or password" if (notificationUsername.nil? || notificationUsername.empty? || notificationPassword.nil? || notificationPassword.empty?)
    
    encodedNotificationText = URI::encode(notificationText)
    
    notificationURL = "https://smsapi.free-mobile.fr/sendmsg?user=#{notificationUsername}&pass=#{notificationPassword}&msg=#{encodedNotificationText}"

    sh "curl -X 'GET' '#{notificationURL}'"

    puts notificationText
end

end
